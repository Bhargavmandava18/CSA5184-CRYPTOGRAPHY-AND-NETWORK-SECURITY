import string
from collections import Counter

def shift_decrypt(text, shift):
    decrypted_text = ""
    for char in text:
        if char.isalpha():
            if char.isupper():
                decrypted_char = chr(((ord(char) - ord('A') - shift) % 26) + ord('A'))
            else:
                decrypted_char = chr(((ord(char) - ord('a') - shift) % 26) + ord('a'))
            decrypted_text += decrypted_char
        else:
            decrypted_text += char
    return decrypted_text

def analyze_letter_frequencies(text):
    letter_count = Counter(text)
    total_letters = sum(letter_count.values())
    letter_frequencies = {char: count / total_letters for char, count in letter_count.items()}
    sorted_frequencies = sorted(letter_frequencies.items(), key=lambda x: x[1], reverse=True)
    return sorted_frequencies

def letter_frequency_attack(ciphertext, top_n=10):
    possible_plaintexts = []

    for shift in range(26):
        decrypted_text = shift_decrypt(ciphertext, shift)
        frequencies = analyze_letter_frequencies(decrypted_text)
        possible_plaintexts.append((decrypted_text, frequencies))
    
    return possible_plaintexts[:top_n]

def main():
    ciphertext = "Vq jxuhu qhfxuh jxuqdr vq aqd dwhqwhu. Vq jxuhu qhfxuh jxuqdr vq xqqhu."
    top_n = 10

    possible_plaintexts = letter_frequency_attack(ciphertext, top_n)

    for i, (plaintext, frequencies) in enumerate(possible_plaintexts, start=1):
        print(f"Plaintext Candidate #{i} (Shift {26 - i}):")
        print(plaintext)
        print("Top letter frequencies:")
        for char, freq in frequencies:
            print(f"{char}: {freq:.4f}")
        print("="*40)

if __name__ == "__main__":
    main()
